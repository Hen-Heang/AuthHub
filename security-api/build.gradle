plugins {
    id 'java'
}

allprojects {
    group = 'com.henheang'
    version = '1.0-SNAPSHOT'
    repositories {
        mavenCentral()
    }
}

subprojects {
    // Only apply plugins here, not in root!
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    dependencies {
        // Keep only what EVERY module needs (if not, move to individual module)
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.11'
        implementation 'org.hibernate.orm:hibernate-core:6.2.7.Final'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        implementation 'commons-beanutils:commons-beanutils:1.9.4'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
        runtimeOnly 'org.postgresql:postgresql'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}



project(':security-api') {
    dependencies {
        implementation project(':todoapi')

    }
}

tasks.register('prepareKotlinBuildScriptModel') {}
